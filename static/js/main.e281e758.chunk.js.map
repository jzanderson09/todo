{"version":3,"sources":["soundbites/click-incomplete.mp3","soundbites/click-done.mp3","soundbites/click-completed.mp3","soundbites/click-prompt.mp3","soundbites/click-clear-selected.mp3","soundbites/add-task.mp3","soundbites/click-select-all.mp3","soundbites/error.mp3","components/Todo/Task.jsx","components/Todo/Todo.jsx","components/Navigation.jsx","App.js","index.js"],"names":["module","exports","Task","completeTasks","soundbites","task","className","Button","variant","status","onClick","done","play","incomplete","id","Todo","props","useState","newTask","setNewTask","changeHandler","e","target","value","addNewTask","preventDefault","addTask","todoList","length","Jumbotron","style","width","margin","map","key","onSubmit","type","name","placeholder","onChange","clearSelected","confirmClear","selectAll","todo","Date","now","completed","Navigation","taskId","updatedList","state","setState","filter","allSelected","error","alert","completionCheck","window","confirm","console","log","taskObj","cleared","selected","Audio","Incomplete","Done","Completed","Alert","errorSound","Tabs","defaultActiveKey","Tab","eventKey","title","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e281e758.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click-incomplete.0d02e0e5.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click-done.852499a0.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click-completed.8e55e72a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click-prompt.50284118.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click-clear-selected.aac5f019.mp3\";","module.exports = __webpack_public_path__ + \"static/media/add-task.3c14ea24.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click-select-all.d8a660f2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/error.eba816ab.mp3\";","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport '../../sass/Todo/Task.scss';\n\n\nconst Task = ({ completeTasks, soundbites, task }) => {\n\n    const clickButton = () => {\n        if (task.status === 'danger') {\n            soundbites.done.play();\n        }\n        else {\n            soundbites.incomplete.play();\n        }\n        completeTasks(task.id);\n    }\n\n    return (\n        <div className='Task'>\n            <Button \n                variant={task.status} \n                onClick={clickButton}\n                ><p>{task.task}</p></Button>\n        </div>\n    );\n};\n\nexport default Task;","import React, { useState } from 'react';\nimport { Button, Jumbotron } from 'react-bootstrap';\nimport '../../sass/Todo/Todo.scss';\n\n// Components:\nimport Task from './Task';\n\nconst Todo = props => {\n    const [newTask, setNewTask] = useState('');\n\n    const changeHandler = e => {\n        setNewTask(e.target.value);\n    };\n\n    const addNewTask = e => {\n        e.preventDefault();\n        props.addTask(newTask);\n        setNewTask('');\n    };\n\n    // When there are tasks in the todoList:\n    if (props.todoList.length > 0) {\n        return (\n            <div className='Todo'>\n                <Jumbotron>\n                    <h1 style={{ width: '100%', \n                        margin: '1% auto'\n                    }}>Tasks:</h1>\n                    {props.todoList.map(task => \n                        <Task \n                            key={task.id} \n                            completeTasks={props.completeTasks}\n                            soundbites={props.soundbites}\n                            task={task}\n                        /> \n                    )}\n                    <form onSubmit={addNewTask}>\n                        <input \n                            type='text'\n                            name='task'\n                            placeholder='I need to...'\n                            value={newTask}\n                            onChange={changeHandler}\n                        />\n                        <Button variant='info' style={{ margin: '3%' }}>Submit</Button>\n                    </form>\n                    <div className='optn-btns'>\n                        <Button variant='light' onClick={props.clearSelected}>Clear Selected</Button>\n                        <Button variant='success' onClick={props.confirmClear}>Complete Selected</Button>\n                        <Button variant='dark' onClick={props.selectAll}>Select All</Button>\n                    </div>\n                </Jumbotron>            \n            </div>\n        );\n    }\n    else {\n        return (\n            <div className='Todo'>\n                <Jumbotron>\n                    <h1>No current tasks!</h1>\n                    <h3>You did everything!</h3>\n                    <form onSubmit={addNewTask}>\n                        <input \n                            type='text'\n                            name='task'\n                            placeholder='I need to...'\n                            value={newTask}\n                            onChange={changeHandler}\n                        />\n                        <Button variant='info' style={{ margin: '3%' }}>Submit</Button>\n                    </form>\n                    <div className='optn-btns'>\n                        <Button variant='light' onClick={props.clearSelected}>Clear Selected</Button>\n                        <Button variant='success' onClick={props.confirmClear}>Complete Selected</Button>\n                        <Button variant='dark' onClick={props.selectAll}>Select All</Button>\n                    </div>\n                </Jumbotron>            \n            </div>\n        );\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport '../sass/Todo/Navigation.scss';\n\n//Components:\nimport Todo from './Todo/Todo';\n// import Calendar from './Calendar/Calendar';\n\n// Audio imports:\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\n\nconst todo = [\n    {\n        id: Date.now(),\n        task: 'Walk The Dog!',\n        completed: false,\n        status: 'danger'\n    },\n    {\n        id: Date.now() + 1,\n        task: 'Do The Dishes!',\n        completed: false,\n        status: 'danger'\n    },\n    {\n        id: Date.now() + 3,\n        task: 'Get 8 Hours Sleep!',\n        completed: false,\n        status: 'danger'\n    }\n];\n\nclass Navigation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoList: todo,\n            incomplete: 'danger',\n            done: 'success',\n            soundbites: {\n                incomplete: new Audio(Incomplete),\n                done: new Audio(Done),\n                completed: new Audio(Completed),\n                clearSelected: new Audio(clearSelected),\n                alert: new Audio(Alert),\n                addTask: new Audio(newTask),\n                selectAll: new Audio(selectAll),\n                error: new Audio(errorSound)\n            },\n            allSelected: false\n        };\n    }\n\n    // Marks tasks as completed and changes button style:\n    completeTasks = taskId => {\n        const updatedList = this.state.todoList.map(task => {\n            if (task.id === taskId) {\n                switch (task.status) {\n                    case 'danger':\n                        return {\n                            ...task,\n                            completed: !task.completed,\n                            status: this.state.done\n                        };\n                    default:\n                        return {\n                            ...task,\n                            completed: !task.completed,\n                            status: this.state.incomplete\n                        };\n                }\n            }\n            return task;\n        });\n        this.setState({ todoList: updatedList });\n    }\n\n    // Clears any selected tasks, ready for completion:\n    clearSelected = () => {\n        const selectionCheck = this.state.todoList.filter(task => task.completed);\n        if (selectionCheck.length > 0) {\n            this.state.soundbites.clearSelected.play();\n            const updatedList = this.state.todoList.map(task => {\n                if (task.status === this.state.done) {\n                    return {\n                        ...task,\n                        completed: false,\n                        status: this.state.incomplete\n                    };\n                }\n                return task;\n            });\n            this.setState({ todoList: updatedList, allSelected: false });\n        }\n        else {\n            this.state.soundbites.error.play();\n        }\n    }\n\n    // Upon confirmation from user, clears completed tasks:\n    confirmClear = () => {\n        this.state.soundbites.alert.play();\n        const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n        if (completionCheck.length === 0) {\n            window.alert('Error:  There are no completed tasks to clear!');\n        }\n        else if (completionCheck.length === 1) {\n            if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n                this.setState({ todoList: updatedList });\n            }\n        }\n        else {\n            if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n                this.setState({ todoList: updatedList });\n            }\n        }\n    }\n\n    // Adds task to the todoList:\n    addTask = task => {\n        this.state.soundbites.addTask.play();\n        console.log();\n        const taskObj = {\n            id: Date.now(),\n            task: `${task}!`,\n            completed: false,\n            status: this.state.incomplete\n        };\n        const updatedList = [...this.state.todoList, taskObj];\n        this.setState({ todoList: updatedList });\n    }\n\n    // Selects all tasks as ready for completion:\n    selectAll = () => {\n        const selectionCheck = this.state.todoList.filter(task => task.completed && task.status === this.state.done);\n        if (selectionCheck.length > 0) {\n            this.state.soundbites.clearSelected.play();\n            const cleared = this.state.todoList.map(taskObj => {\n              return {\n                ...taskObj,\n                completed: false,\n                status: this.state.incomplete\n              }\n            });\n            this.setState({ todoList: cleared, allSelected: false });\n          }\n          else {\n            this.state.soundbites.selectAll.play();\n            const selected = this.state.todoList.map(taskObj => {\n              return {\n                ...taskObj,\n                completed: true,\n                status: this.state.done\n              };\n            });\n            this.setState({ todoList: selected, allSelected: true });\n          }\n    }\n\n    render() {\n        return (\n            <div className='Navigation'>\n                <Tabs defaultActiveKey='todo'>\n                    <Tab eventKey='todo' title='Todo'>\n                        <Todo\n                            addTask={this.addTask}\n                            clearSelected={this.clearSelected}\n                            completeTasks={this.completeTasks}\n                            confirmClear={this.confirmClear}\n                            selectAll={this.selectAll}\n                            soundbites={this.state.soundbites}\n                            todoList={this.state.todoList}\n                        />  \n                    </Tab>\n                    {/* <Tab eventKey='board' title='Board'>\n                        <h1>Board!</h1>\n                    </Tab>\n                    <Tab eventKey='calendar' title='Calendar'>\n                        <Calendar />\n                    </Tab> */}\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;","import React from 'react';\nimport './sass/App.scss';\n\n// Components:\nimport Navigation from './components/Navigation';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Navigation />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './sass/index.scss';\nimport App from './App';\n\nReactDOM.render(\n<Router>\n  <App />\n</Router>, document.getElementById('root'));\n"],"sourceRoot":""}