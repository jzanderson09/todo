{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Lambda/todo/src/components/Navigation.jsx\";\nimport React, { Component } from 'react';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport '../sass/Todo/Navigation.scss'; //Components:\n\nimport Todo from './Todo/Todo'; // import Calendar from './Calendar/Calendar';\n// Audio imports:\n\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\nconst todo = [{\n  id: Date.now(),\n  task: 'Walk The Dog!',\n  completed: false,\n  status: 'danger'\n}, {\n  id: Date.now() + 1,\n  task: 'Do The Dishes!',\n  completed: false,\n  status: 'danger'\n}, {\n  id: Date.now() + 3,\n  task: 'Get 8 Hours Sleep!',\n  completed: false,\n  status: 'danger'\n}];\n\nclass Navigation extends Component {\n  constructor() {\n    super();\n\n    this.completeTasks = taskId => {\n      const updatedList = this.state.todoList.map(task => {\n        if (task.id === taskId) {\n          switch (task.status) {\n            case 'danger':\n              return { ...task,\n                completed: !task.completed,\n                status: this.state.done\n              };\n\n            default:\n              return { ...task,\n                completed: !task.completed,\n                status: this.state.incomplete\n              };\n          }\n        }\n\n        return task;\n      });\n      this.setState({\n        todoList: updatedList\n      });\n    };\n\n    this.clearSelected = () => {\n      const selectionCheck = this.state.todoList.filter(task => task.completed);\n\n      if (selectionCheck.length > 0) {\n        this.state.soundbites.clearSelected.play();\n        const updatedList = this.state.todoList.map(task => {\n          if (task.status === this.state.done) {\n            return { ...task,\n              completed: false,\n              status: this.state.incomplete\n            };\n          }\n\n          return task;\n        });\n        this.setState({\n          todoList: updatedList,\n          allSelected: false\n        });\n      } else {\n        this.state.soundbites.error.play();\n      }\n    };\n\n    this.confirmClear = () => {\n      this.state.soundbites.alert.play();\n      const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n\n      if (completionCheck.length === 0) {\n        window.alert('Error:  There are no completed tasks to clear!');\n      } else if (completionCheck.length === 1) {\n        if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n          this.state.soundbites.completed.play();\n          const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n          this.setState({\n            todoList: updatedList\n          });\n        }\n      } else {\n        if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n          this.state.soundbites.completed.play();\n          const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n          this.setState({\n            todoList: updatedList\n          });\n        }\n      }\n    };\n\n    this.addTask = task => {\n      this.state.soundbites.addTask.play();\n      console.log();\n      const taskObj = {\n        id: Date.now(),\n        task: `${task}!`,\n        completed: false,\n        status: this.state.incomplete\n      };\n      const updatedList = [...this.state.todoList, taskObj];\n      this.setState({\n        todoList: updatedList\n      });\n    };\n\n    this.selectAll = () => {\n      const selectionCheck = this.state.todoList.filter(task => task.completed && task.status === this.state.done);\n\n      if (selectionCheck.length > 0) {\n        this.state.soundbites.clearSelected.play();\n        const cleared = this.state.todoList.map(taskObj => {\n          return { ...taskObj,\n            completed: false,\n            status: this.state.incomplete\n          };\n        });\n        this.setState({\n          todoList: cleared,\n          allSelected: false\n        });\n      } else {\n        this.state.soundbites.selectAll.play();\n        const selected = this.state.todoList.map(taskObj => {\n          return { ...taskObj,\n            completed: true,\n            status: this.state.done\n          };\n        });\n        this.setState({\n          todoList: selected,\n          allSelected: true\n        });\n      }\n    };\n\n    this.state = {\n      todoList: todo,\n      incomplete: 'danger',\n      done: 'success',\n      soundbites: {\n        incomplete: new Audio(Incomplete),\n        done: new Audio(Done),\n        completed: new Audio(Completed),\n        clearSelected: new Audio(clearSelected),\n        alert: new Audio(Alert),\n        addTask: new Audio(newTask),\n        selectAll: new Audio(selectAll),\n        error: new Audio(errorSound)\n      },\n      allSelected: false\n    };\n  } // Marks tasks as completed and changes button style:\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      defaultActiveKey: \"todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      eventKey: \"todo\",\n      title: \"Todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Todo, {\n      addTask: this.addTask,\n      clearSelected: this.clearSelected,\n      completeTasks: this.completeTasks,\n      confirmClear: this.confirmClear,\n      selectAll: this.selectAll,\n      soundbites: this.state.soundbites,\n      todoList: this.state.todoList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Navigation;","map":{"version":3,"sources":["/Users/user/Documents/Lambda/todo/src/components/Navigation.jsx"],"names":["React","Component","Tab","Tabs","Todo","Incomplete","Done","Completed","Alert","clearSelected","newTask","selectAll","errorSound","todo","id","Date","now","task","completed","status","Navigation","constructor","completeTasks","taskId","updatedList","state","todoList","map","done","incomplete","setState","selectionCheck","filter","length","soundbites","play","allSelected","error","confirmClear","alert","completionCheck","window","confirm","addTask","console","log","taskObj","cleared","selected","Audio","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport '../sass/Todo/Navigation.scss';\n\n//Components:\nimport Todo from './Todo/Todo';\n// import Calendar from './Calendar/Calendar';\n\n// Audio imports:\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\n\nconst todo = [\n    {\n        id: Date.now(),\n        task: 'Walk The Dog!',\n        completed: false,\n        status: 'danger'\n    },\n    {\n        id: Date.now() + 1,\n        task: 'Do The Dishes!',\n        completed: false,\n        status: 'danger'\n    },\n    {\n        id: Date.now() + 3,\n        task: 'Get 8 Hours Sleep!',\n        completed: false,\n        status: 'danger'\n    }\n];\n\nclass Navigation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoList: todo,\n            incomplete: 'danger',\n            done: 'success',\n            soundbites: {\n                incomplete: new Audio(Incomplete),\n                done: new Audio(Done),\n                completed: new Audio(Completed),\n                clearSelected: new Audio(clearSelected),\n                alert: new Audio(Alert),\n                addTask: new Audio(newTask),\n                selectAll: new Audio(selectAll),\n                error: new Audio(errorSound)\n            },\n            allSelected: false\n        };\n    }\n\n    // Marks tasks as completed and changes button style:\n    completeTasks = taskId => {\n        const updatedList = this.state.todoList.map(task => {\n            if (task.id === taskId) {\n                switch (task.status) {\n                    case 'danger':\n                        return {\n                            ...task,\n                            completed: !task.completed,\n                            status: this.state.done\n                        };\n                    default:\n                        return {\n                            ...task,\n                            completed: !task.completed,\n                            status: this.state.incomplete\n                        };\n                }\n            }\n            return task;\n        });\n        this.setState({ todoList: updatedList });\n    }\n\n    // Clears any selected tasks, ready for completion:\n    clearSelected = () => {\n        const selectionCheck = this.state.todoList.filter(task => task.completed);\n        if (selectionCheck.length > 0) {\n            this.state.soundbites.clearSelected.play();\n            const updatedList = this.state.todoList.map(task => {\n                if (task.status === this.state.done) {\n                    return {\n                        ...task,\n                        completed: false,\n                        status: this.state.incomplete\n                    };\n                }\n                return task;\n            });\n            this.setState({ todoList: updatedList, allSelected: false });\n        }\n        else {\n            this.state.soundbites.error.play();\n        }\n    }\n\n    // Upon confirmation from user, clears completed tasks:\n    confirmClear = () => {\n        this.state.soundbites.alert.play();\n        const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n        if (completionCheck.length === 0) {\n            window.alert('Error:  There are no completed tasks to clear!');\n        }\n        else if (completionCheck.length === 1) {\n            if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n                this.setState({ todoList: updatedList });\n            }\n        }\n        else {\n            if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n                this.setState({ todoList: updatedList });\n            }\n        }\n    }\n\n    // Adds task to the todoList:\n    addTask = task => {\n        this.state.soundbites.addTask.play();\n        console.log();\n        const taskObj = {\n            id: Date.now(),\n            task: `${task}!`,\n            completed: false,\n            status: this.state.incomplete\n        };\n        const updatedList = [...this.state.todoList, taskObj];\n        this.setState({ todoList: updatedList });\n    }\n\n    // Selects all tasks as ready for completion:\n    selectAll = () => {\n        const selectionCheck = this.state.todoList.filter(task => task.completed && task.status === this.state.done);\n        if (selectionCheck.length > 0) {\n            this.state.soundbites.clearSelected.play();\n            const cleared = this.state.todoList.map(taskObj => {\n              return {\n                ...taskObj,\n                completed: false,\n                status: this.state.incomplete\n              }\n            });\n            this.setState({ todoList: cleared, allSelected: false });\n          }\n          else {\n            this.state.soundbites.selectAll.play();\n            const selected = this.state.todoList.map(taskObj => {\n              return {\n                ...taskObj,\n                completed: true,\n                status: this.state.done\n              };\n            });\n            this.setState({ todoList: selected, allSelected: true });\n          }\n    }\n\n    render() {\n        return (\n            <div className='Navigation'>\n                <Tabs defaultActiveKey='todo'>\n                    <Tab eventKey='todo' title='Todo'>\n                        <Todo\n                            addTask={this.addTask}\n                            clearSelected={this.clearSelected}\n                            completeTasks={this.completeTasks}\n                            confirmClear={this.confirmClear}\n                            selectAll={this.selectAll}\n                            soundbites={this.state.soundbites}\n                            todoList={this.state.todoList}\n                        />  \n                    </Tab>\n                    {/* <Tab eventKey='board' title='Board'>\n                        <h1>Board!</h1>\n                    </Tab>\n                    <Tab eventKey='calendar' title='Calendar'>\n                        <Calendar />\n                    </Tab> */}\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}