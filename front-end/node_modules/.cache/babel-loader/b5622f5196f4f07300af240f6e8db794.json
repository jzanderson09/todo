{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Lambda/todo/front-end/src/components/TodoList.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport '../sass/TodoList.scss'; //Components:\n\nimport Todo from './Todo/Todo'; // Audio imports:\n\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\n\nclass Navigation extends Component {\n  constructor() {\n    super();\n\n    this.completeTasks = taskId => {\n      const completedTask = this.state.todoList.filter(task => task.id === taskId);\n      completedTask.completed = !completedTask.taskcompleted;\n\n      if (completedTask.status === 'success') {\n        completedTask.status = 'danger';\n      } else {\n        completedTask.status = 'success';\n      }\n\n      db.updatedTask(taskId, completedTask);\n    };\n\n    this.clearSelected = () => {\n      const selectionCheck = this.state.todoList.filter(task => task.completed);\n\n      if (selectionCheck.length > 0) {\n        this.state.soundbites.clearSelected.play();\n        const updatedList = this.state.todoList.map(task => {\n          if (task.status === this.state.done) {\n            return { ...task,\n              completed: false,\n              status: this.state.incomplete\n            };\n          }\n\n          return task;\n        });\n        this.setState({\n          todoList: updatedList,\n          allSelected: false\n        });\n      } else {\n        this.state.soundbites.error.play();\n      }\n    };\n\n    this.confirmClear = () => {\n      this.state.soundbites.alert.play();\n      const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n\n      if (completionCheck.length === 0) {\n        window.alert('Error:  There are no completed tasks to clear!');\n      } else if (completionCheck.length === 1) {\n        if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n          this.state.soundbites.completed.play();\n          const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n        }\n      } else {\n        if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n          this.state.soundbites.completed.play();\n          const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n          this.setState({\n            todoList: updatedList\n          });\n        }\n      }\n    };\n\n    this.addTask = task => {\n      if (task.length > 0) {\n        this.state.soundbites.addTask.play();\n        console.log();\n        const taskObj = {\n          id: Date.now(),\n          task: `${task}!`,\n          completed: false,\n          status: this.state.incomplete\n        };\n        const updatedList = [...this.state.todoList, taskObj];\n        this.setState({\n          todoList: updatedList\n        });\n      } else {\n        this.state.soundbites.error.play();\n        window.alert('Error:  Cannot submit an empty task!  Ya gotta DO something, man!');\n      }\n    };\n\n    this.selectAll = () => {\n      const selectionCheck = this.state.todoList.filter(task => task.completed && task.status === this.state.done);\n\n      if (selectionCheck.length > 0) {\n        this.state.soundbites.clearSelected.play();\n        const cleared = this.state.todoList.map(taskObj => {\n          return { ...taskObj,\n            completed: false,\n            status: this.state.incomplete\n          };\n        });\n        this.setState({\n          todoList: cleared,\n          allSelected: false\n        });\n      } else {\n        this.state.soundbites.selectAll.play();\n        const selected = this.state.todoList.map(taskObj => {\n          return { ...taskObj,\n            completed: true,\n            status: this.state.done\n          };\n        });\n        this.setState({\n          todoList: selected,\n          allSelected: true\n        });\n      }\n    };\n\n    this.state = {\n      todoList: [],\n      incomplete: 'danger',\n      done: 'success',\n      soundbites: {\n        incomplete: new Audio(Incomplete),\n        done: new Audio(Done),\n        completed: new Audio(Completed),\n        clearSelected: new Audio(clearSelected),\n        alert: new Audio(Alert),\n        addTask: new Audio(newTask),\n        selectAll: new Audio(selectAll),\n        error: new Audio(errorSound)\n      },\n      allSelected: false\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:8000/tasks').then(res => this.setState({\n      todoList: res.data\n    })).catch(err => console.log(err));\n  } // Marks tasks as completed and changes button style:\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      defaultActiveKey: \"todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      eventKey: \"todo\",\n      title: \"Todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Todo, {\n      addTask: this.addTask,\n      clearSelected: this.clearSelected,\n      completeTasks: this.completeTasks,\n      confirmClear: this.confirmClear,\n      selectAll: this.selectAll,\n      soundbites: this.state.soundbites,\n      todoList: this.state.todoList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Navigation;","map":{"version":3,"sources":["/Users/user/Documents/Lambda/todo/front-end/src/components/TodoList.jsx"],"names":["React","Component","axios","Tabs","Tab","Todo","Incomplete","Done","Completed","Alert","clearSelected","newTask","selectAll","errorSound","Navigation","constructor","completeTasks","taskId","completedTask","state","todoList","filter","task","id","completed","taskcompleted","status","db","updatedTask","selectionCheck","length","soundbites","play","updatedList","map","done","incomplete","setState","allSelected","error","confirmClear","alert","completionCheck","window","confirm","addTask","console","log","taskObj","Date","now","cleared","selected","Audio","componentDidMount","get","then","res","data","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport '../sass/TodoList.scss';\n\n//Components:\nimport Todo from './Todo/Todo';\n\n// Audio imports:\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\n\nclass Navigation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoList: [],\n            incomplete: 'danger',\n            done: 'success',\n            soundbites: {\n                incomplete: new Audio(Incomplete),\n                done: new Audio(Done),\n                completed: new Audio(Completed),\n                clearSelected: new Audio(clearSelected),\n                alert: new Audio(Alert),\n                addTask: new Audio(newTask),\n                selectAll: new Audio(selectAll),\n                error: new Audio(errorSound)\n            },\n            allSelected: false\n        };\n    }\n\n    componentDidMount() {\n        axios\n            .get('http://localhost:8000/tasks')\n            .then(res => this.setState({ todoList: res.data }))\n            .catch(err => console.log(err));\n    }\n\n    // Marks tasks as completed and changes button style:\n    completeTasks = taskId => {\n        const completedTask = this.state.todoList.filter(task => task.id === taskId);\n        completedTask.completed = !completedTask.taskcompleted;\n        if (completedTask.status === 'success') {\n            completedTask.status = 'danger';\n        }\n        else {\n            completedTask.status = 'success';\n        }\n        db.updatedTask(taskId, completedTask);\n    }\n\n    // Clears any selected tasks, ready for completion:\n    clearSelected = () => {\n        const selectionCheck = this.state.todoList.filter(task => task.completed);\n        if (selectionCheck.length > 0) {\n            this.state.soundbites.clearSelected.play();\n            const updatedList = this.state.todoList.map(task => {\n                if (task.status === this.state.done) {\n                    return {\n                        ...task,\n                        completed: false,\n                        status: this.state.incomplete\n                    };\n                }\n                return task;\n            });\n            this.setState({ todoList: updatedList, allSelected: false });\n        }\n        else {\n            this.state.soundbites.error.play();\n        }\n    }\n\n    // Upon confirmation from user, clears completed tasks:\n    confirmClear = () => {\n        this.state.soundbites.alert.play();\n        const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n        if (completionCheck.length === 0) {\n            window.alert('Error:  There are no completed tasks to clear!');\n        }\n        else if (completionCheck.length === 1) {\n            if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n            }\n        }\n        else {\n            if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n                this.setState({ todoList: updatedList });\n            }\n        }\n    }\n\n    // Adds task to the todoList:\n    addTask = task => {\n        if (task.length > 0) {\n            this.state.soundbites.addTask.play();\n            console.log();\n            const taskObj = {\n                id: Date.now(),\n                task: `${task}!`,\n                completed: false,\n                status: this.state.incomplete\n            };\n            const updatedList = [...this.state.todoList, taskObj];\n            this.setState({ todoList: updatedList });\n        }\n        else {\n            this.state.soundbites.error.play();\n            window.alert('Error:  Cannot submit an empty task!  Ya gotta DO something, man!');\n        }\n    }\n\n    // Selects all tasks as ready for completion:\n    selectAll = () => {\n        const selectionCheck = this.state.todoList.filter(task => task.completed && task.status === this.state.done);\n        if (selectionCheck.length > 0) {\n            this.state.soundbites.clearSelected.play();\n            const cleared = this.state.todoList.map(taskObj => {\n              return {\n                ...taskObj,\n                completed: false,\n                status: this.state.incomplete\n              }\n            });\n            this.setState({ todoList: cleared, allSelected: false });\n          }\n          else {\n            this.state.soundbites.selectAll.play();\n            const selected = this.state.todoList.map(taskObj => {\n              return {\n                ...taskObj,\n                completed: true,\n                status: this.state.done\n              };\n            });\n            this.setState({ todoList: selected, allSelected: true });\n          }\n    }\n\n    render() {\n        return (\n            <div className='Navigation'>\n                <Tabs defaultActiveKey='todo'>\n                    <Tab eventKey='todo' title='Todo'>\n                        <Todo\n                            addTask={this.addTask}\n                            clearSelected={this.clearSelected}\n                            completeTasks={this.completeTasks}\n                            confirmClear={this.confirmClear}\n                            selectAll={this.selectAll}\n                            soundbites={this.state.soundbites}\n                            todoList={this.state.todoList}\n                        />  \n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}