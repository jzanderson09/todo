{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Lambda/todo/front-end/src/components/TodoList.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport '../sass/TodoList.scss'; //Components:\n\nimport Todo from './Todo/Todo'; // Audio imports:\n\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\n\nclass Navigation extends Component {\n  constructor() {\n    super();\n\n    this.toggleCompleted = taskId => {\n      axios.put(`http://localhost:8000/tasks/:${taskId}`).then(res => this.setState({\n        todoList: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.confirmClear = () => {\n      this.state.soundbites.alert.play();\n      const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n\n      if (completionCheck.length === 0) {\n        window.alert('Error:  There are no completed tasks to clear!');\n      } else if (completionCheck.length === 1) {\n        if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n          this.state.soundbites.completed.play();\n          axios.del('http://localhost:8000/tasks').then(res => this.setState({\n            todoList: res.data\n          })).catch(err => console.log(err));\n        }\n      } else {\n        if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n          this.state.soundbites.completed.play();\n          const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n          this.setState({\n            todoList: updatedList\n          });\n        }\n      }\n    };\n\n    this.addTask = task => {\n      if (task.length > 0) {\n        this.state.soundbites.addTask.play(); // Creates the task object ready to be pushed to the DB:\n\n        const taskObj = {\n          task: `${task}!`,\n          completed: false,\n          status: this.state.incomplete\n        };\n        axios.post('http://localhost:8000/tasks', taskObj).then(res => this.setState({\n          todoList: res.data\n        })).catch(err => console.log(err));\n      } else {\n        this.state.soundbites.error.play();\n        window.alert('Error:  Cannot submit an empty task!  Ya gotta DO something, man!');\n      }\n    };\n\n    this.selectAll = () => {};\n\n    this.state = {\n      todoList: [],\n      incomplete: 'danger',\n      done: 'success',\n      soundbites: {\n        incomplete: new Audio(Incomplete),\n        done: new Audio(Done),\n        completed: new Audio(Completed),\n        clearSelected: new Audio(clearSelected),\n        alert: new Audio(Alert),\n        addTask: new Audio(newTask),\n        selectAll: new Audio(selectAll),\n        error: new Audio(errorSound)\n      },\n      allSelected: false\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:8000/tasks').then(res => this.setState({\n      todoList: res.data\n    })).catch(err => console.log(err));\n  } // Marks tasks as completed and changes button style:\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Navigation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      defaultActiveKey: \"todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tab, {\n      eventKey: \"todo\",\n      title: \"Todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Todo, {\n      addTask: this.addTask,\n      toggleCompleted: this.toggleCompleted,\n      confirmClear: this.confirmClear,\n      selectAll: this.selectAll,\n      soundbites: this.state.soundbites,\n      todoList: this.state.todoList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Navigation;","map":{"version":3,"sources":["/Users/user/Documents/Lambda/todo/front-end/src/components/TodoList.jsx"],"names":["React","Component","axios","Tabs","Tab","Todo","Incomplete","Done","Completed","Alert","clearSelected","newTask","selectAll","errorSound","Navigation","constructor","toggleCompleted","taskId","put","then","res","setState","todoList","data","catch","err","console","log","confirmClear","state","soundbites","alert","play","completionCheck","filter","task","status","done","length","window","confirm","completed","del","updatedList","incomplete","addTask","taskObj","post","error","Audio","allSelected","componentDidMount","get","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport '../sass/TodoList.scss';\n\n//Components:\nimport Todo from './Todo/Todo';\n\n// Audio imports:\nimport Incomplete from '../soundbites/click-incomplete.mp3';\nimport Done from '../soundbites/click-done.mp3';\nimport Completed from '../soundbites/click-completed.mp3';\nimport Alert from '../soundbites/click-prompt.mp3';\nimport clearSelected from '../soundbites/click-clear-selected.mp3';\nimport newTask from '../soundbites/add-task.mp3';\nimport selectAll from '../soundbites/click-select-all.mp3';\nimport errorSound from '../soundbites/error.mp3';\n\nclass Navigation extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todoList: [],\n            incomplete: 'danger',\n            done: 'success',\n            soundbites: {\n                incomplete: new Audio(Incomplete),\n                done: new Audio(Done),\n                completed: new Audio(Completed),\n                clearSelected: new Audio(clearSelected),\n                alert: new Audio(Alert),\n                addTask: new Audio(newTask),\n                selectAll: new Audio(selectAll),\n                error: new Audio(errorSound)\n            },\n            allSelected: false\n        };\n    }\n\n    componentDidMount() {\n        axios\n            .get('http://localhost:8000/tasks')\n            .then(res => this.setState({ todoList: res.data }))\n            .catch(err => console.log(err));\n    }\n\n    // Marks tasks as completed and changes button style:\n    toggleCompleted = taskId => {\n        axios\n            .put(`http://localhost:8000/tasks/:${taskId}`)\n            .then(res => this.setState({ todoList: res.data }))\n            .catch(err => console.log(err));\n    }\n\n    // Upon confirmation from user, clears completed tasks:\n    confirmClear = () => {\n        this.state.soundbites.alert.play();\n        const completionCheck = this.state.todoList.filter(task => task.status === this.state.done);\n        if (completionCheck.length === 0) {\n            window.alert('Error:  There are no completed tasks to clear!');\n        }\n        else if (completionCheck.length === 1) {\n            if (window.confirm(`Are you sure you want to clear the task '${completionCheck[0].task}' ?`)) {\n                this.state.soundbites.completed.play();\n                axios\n                    .del('http://localhost:8000/tasks')\n                    .then(res => this.setState({ todoList: res.data }))\n                    .catch(err => console.log(err));\n            }\n        }\n        else {\n            if (window.confirm('Are you sure you want to clear the completed tasks?  This cannot be undone!')) {\n                this.state.soundbites.completed.play();\n                const updatedList = this.state.todoList.filter(task => task.status === this.state.incomplete);\n                this.setState({ todoList: updatedList });\n            }\n        }\n    }\n\n    // Adds task to the todoList:\n    addTask = task => {\n        if (task.length > 0) {\n            this.state.soundbites.addTask.play();\n            // Creates the task object ready to be pushed to the DB:\n            const taskObj = {\n                task: `${task}!`,\n                completed: false,\n                status: this.state.incomplete\n            };\n            axios\n                .post('http://localhost:8000/tasks', taskObj)\n                .then(res => this.setState({ todoList: res.data }))\n                .catch(err => console.log(err));\n        }\n        else {\n            this.state.soundbites.error.play();\n            window.alert('Error:  Cannot submit an empty task!  Ya gotta DO something, man!');\n        }\n    }\n\n    // Selects all tasks as ready for completion:\n    selectAll = () => {\n\n    }\n\n    render() {\n        return (\n            <div className='Navigation'>\n                <Tabs defaultActiveKey='todo'>\n                    <Tab eventKey='todo' title='Todo'>\n                        <Todo\n                            addTask={this.addTask}\n                            toggleCompleted={this.toggleCompleted}\n                            confirmClear={this.confirmClear}\n                            selectAll={this.selectAll}\n                            soundbites={this.state.soundbites}\n                            todoList={this.state.todoList}\n                        />  \n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}